//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.34014.
// 
#pragma warning disable 1591

namespace Kraken.SharePoint.Cloud.ExcelServiceWS {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ExcelServiceSoap", Namespace="http://schemas.microsoft.com/office/excel/server/webservices")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TypeExporter))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(object[]))]
    public partial class ExcelService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetApiVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback NewWorkbookOperationCompleted;
        
        private System.Threading.SendOrPostCallback OpenWorkbookForEditingOperationCompleted;
        
        private System.Threading.SendOrPostCallback OpenWorkbookOperationCompleted;
        
        private System.Threading.SendOrPostCallback CloseWorkbookOperationCompleted;
        
        private System.Threading.SendOrPostCallback RefreshOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveWorkbookOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveWorkbookCopyOperationCompleted;
        
        private System.Threading.SendOrPostCallback CalculateOperationCompleted;
        
        private System.Threading.SendOrPostCallback CalculateA1OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRangeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRangeA1OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCellOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCellA1OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPublishedItemNamesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSheetNamesOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetRangeOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetRangeA1OperationCompleted;
        
        private System.Threading.SendOrPostCallback SetCellOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetCellA1OperationCompleted;
        
        private System.Threading.SendOrPostCallback CalculateWorkbookOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSessionInformationOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWorkbookOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetParametersOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetCalculationOptionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetChartImageUrlOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ExcelService() {
            this.Url = global::Kraken.SharePoint.Cloud.Properties.Settings.Default.Kraken_SharePoint_Cloud_ExcelServiceWS_ExcelService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetApiVersionCompletedEventHandler GetApiVersionCompleted;
        
        /// <remarks/>
        public event NewWorkbookCompletedEventHandler NewWorkbookCompleted;
        
        /// <remarks/>
        public event OpenWorkbookForEditingCompletedEventHandler OpenWorkbookForEditingCompleted;
        
        /// <remarks/>
        public event OpenWorkbookCompletedEventHandler OpenWorkbookCompleted;
        
        /// <remarks/>
        public event CloseWorkbookCompletedEventHandler CloseWorkbookCompleted;
        
        /// <remarks/>
        public event RefreshCompletedEventHandler RefreshCompleted;
        
        /// <remarks/>
        public event SaveWorkbookCompletedEventHandler SaveWorkbookCompleted;
        
        /// <remarks/>
        public event SaveWorkbookCopyCompletedEventHandler SaveWorkbookCopyCompleted;
        
        /// <remarks/>
        public event CalculateCompletedEventHandler CalculateCompleted;
        
        /// <remarks/>
        public event CalculateA1CompletedEventHandler CalculateA1Completed;
        
        /// <remarks/>
        public event GetRangeCompletedEventHandler GetRangeCompleted;
        
        /// <remarks/>
        public event GetRangeA1CompletedEventHandler GetRangeA1Completed;
        
        /// <remarks/>
        public event GetCellCompletedEventHandler GetCellCompleted;
        
        /// <remarks/>
        public event GetCellA1CompletedEventHandler GetCellA1Completed;
        
        /// <remarks/>
        public event GetPublishedItemNamesCompletedEventHandler GetPublishedItemNamesCompleted;
        
        /// <remarks/>
        public event GetSheetNamesCompletedEventHandler GetSheetNamesCompleted;
        
        /// <remarks/>
        public event SetRangeCompletedEventHandler SetRangeCompleted;
        
        /// <remarks/>
        public event SetRangeA1CompletedEventHandler SetRangeA1Completed;
        
        /// <remarks/>
        public event SetCellCompletedEventHandler SetCellCompleted;
        
        /// <remarks/>
        public event SetCellA1CompletedEventHandler SetCellA1Completed;
        
        /// <remarks/>
        public event CalculateWorkbookCompletedEventHandler CalculateWorkbookCompleted;
        
        /// <remarks/>
        public event GetSessionInformationCompletedEventHandler GetSessionInformationCompleted;
        
        /// <remarks/>
        public event CancelRequestCompletedEventHandler CancelRequestCompleted;
        
        /// <remarks/>
        public event GetWorkbookCompletedEventHandler GetWorkbookCompleted;
        
        /// <remarks/>
        public event SetParametersCompletedEventHandler SetParametersCompleted;
        
        /// <remarks/>
        public event SetCalculationOptionsCompletedEventHandler SetCalculationOptionsCompleted;
        
        /// <remarks/>
        public event GetChartImageUrlCompletedEventHandler GetChartImageUrlCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/office/excel/server/webservices/GetApiVersion", RequestNamespace="http://schemas.microsoft.com/office/excel/server/webservices", ResponseNamespace="http://schemas.microsoft.com/office/excel/server/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetApiVersion(out Status[] status) {
            object[] results = this.Invoke("GetApiVersion", new object[0]);
            status = ((Status[])(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetApiVersionAsync() {
            this.GetApiVersionAsync(null);
        }
        
        /// <remarks/>
        public void GetApiVersionAsync(object userState) {
            if ((this.GetApiVersionOperationCompleted == null)) {
                this.GetApiVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetApiVersionOperationCompleted);
            }
            this.InvokeAsync("GetApiVersion", new object[0], this.GetApiVersionOperationCompleted, userState);
        }
        
        private void OnGetApiVersionOperationCompleted(object arg) {
            if ((this.GetApiVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetApiVersionCompleted(this, new GetApiVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/office/excel/server/webservices/NewWorkbook", RequestNamespace="http://schemas.microsoft.com/office/excel/server/webservices", ResponseNamespace="http://schemas.microsoft.com/office/excel/server/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string NewWorkbook(string path, string uiCultureName, string dataCultureName, out Status[] status) {
            object[] results = this.Invoke("NewWorkbook", new object[] {
                        path,
                        uiCultureName,
                        dataCultureName});
            status = ((Status[])(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void NewWorkbookAsync(string path, string uiCultureName, string dataCultureName) {
            this.NewWorkbookAsync(path, uiCultureName, dataCultureName, null);
        }
        
        /// <remarks/>
        public void NewWorkbookAsync(string path, string uiCultureName, string dataCultureName, object userState) {
            if ((this.NewWorkbookOperationCompleted == null)) {
                this.NewWorkbookOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNewWorkbookOperationCompleted);
            }
            this.InvokeAsync("NewWorkbook", new object[] {
                        path,
                        uiCultureName,
                        dataCultureName}, this.NewWorkbookOperationCompleted, userState);
        }
        
        private void OnNewWorkbookOperationCompleted(object arg) {
            if ((this.NewWorkbookCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NewWorkbookCompleted(this, new NewWorkbookCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/office/excel/server/webservices/OpenWorkbookForEditi" +
            "ng", RequestNamespace="http://schemas.microsoft.com/office/excel/server/webservices", ResponseNamespace="http://schemas.microsoft.com/office/excel/server/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string OpenWorkbookForEditing(string workbookPath, string uiCultureName, string dataCultureName, out Status[] status) {
            object[] results = this.Invoke("OpenWorkbookForEditing", new object[] {
                        workbookPath,
                        uiCultureName,
                        dataCultureName});
            status = ((Status[])(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void OpenWorkbookForEditingAsync(string workbookPath, string uiCultureName, string dataCultureName) {
            this.OpenWorkbookForEditingAsync(workbookPath, uiCultureName, dataCultureName, null);
        }
        
        /// <remarks/>
        public void OpenWorkbookForEditingAsync(string workbookPath, string uiCultureName, string dataCultureName, object userState) {
            if ((this.OpenWorkbookForEditingOperationCompleted == null)) {
                this.OpenWorkbookForEditingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOpenWorkbookForEditingOperationCompleted);
            }
            this.InvokeAsync("OpenWorkbookForEditing", new object[] {
                        workbookPath,
                        uiCultureName,
                        dataCultureName}, this.OpenWorkbookForEditingOperationCompleted, userState);
        }
        
        private void OnOpenWorkbookForEditingOperationCompleted(object arg) {
            if ((this.OpenWorkbookForEditingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OpenWorkbookForEditingCompleted(this, new OpenWorkbookForEditingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/office/excel/server/webservices/OpenWorkbook", RequestNamespace="http://schemas.microsoft.com/office/excel/server/webservices", ResponseNamespace="http://schemas.microsoft.com/office/excel/server/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string OpenWorkbook(string workbookPath, string uiCultureName, string dataCultureName, out Status[] status) {
            object[] results = this.Invoke("OpenWorkbook", new object[] {
                        workbookPath,
                        uiCultureName,
                        dataCultureName});
            status = ((Status[])(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void OpenWorkbookAsync(string workbookPath, string uiCultureName, string dataCultureName) {
            this.OpenWorkbookAsync(workbookPath, uiCultureName, dataCultureName, null);
        }
        
        /// <remarks/>
        public void OpenWorkbookAsync(string workbookPath, string uiCultureName, string dataCultureName, object userState) {
            if ((this.OpenWorkbookOperationCompleted == null)) {
                this.OpenWorkbookOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOpenWorkbookOperationCompleted);
            }
            this.InvokeAsync("OpenWorkbook", new object[] {
                        workbookPath,
                        uiCultureName,
                        dataCultureName}, this.OpenWorkbookOperationCompleted, userState);
        }
        
        private void OnOpenWorkbookOperationCompleted(object arg) {
            if ((this.OpenWorkbookCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OpenWorkbookCompleted(this, new OpenWorkbookCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/office/excel/server/webservices/CloseWorkbook", RequestNamespace="http://schemas.microsoft.com/office/excel/server/webservices", ResponseNamespace="http://schemas.microsoft.com/office/excel/server/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("status")]
        public Status[] CloseWorkbook(string sessionId) {
            object[] results = this.Invoke("CloseWorkbook", new object[] {
                        sessionId});
            return ((Status[])(results[0]));
        }
        
        /// <remarks/>
        public void CloseWorkbookAsync(string sessionId) {
            this.CloseWorkbookAsync(sessionId, null);
        }
        
        /// <remarks/>
        public void CloseWorkbookAsync(string sessionId, object userState) {
            if ((this.CloseWorkbookOperationCompleted == null)) {
                this.CloseWorkbookOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCloseWorkbookOperationCompleted);
            }
            this.InvokeAsync("CloseWorkbook", new object[] {
                        sessionId}, this.CloseWorkbookOperationCompleted, userState);
        }
        
        private void OnCloseWorkbookOperationCompleted(object arg) {
            if ((this.CloseWorkbookCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CloseWorkbookCompleted(this, new CloseWorkbookCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/office/excel/server/webservices/Refresh", RequestNamespace="http://schemas.microsoft.com/office/excel/server/webservices", ResponseNamespace="http://schemas.microsoft.com/office/excel/server/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("status")]
        public Status[] Refresh(string sessionId, string connectionName) {
            object[] results = this.Invoke("Refresh", new object[] {
                        sessionId,
                        connectionName});
            return ((Status[])(results[0]));
        }
        
        /// <remarks/>
        public void RefreshAsync(string sessionId, string connectionName) {
            this.RefreshAsync(sessionId, connectionName, null);
        }
        
        /// <remarks/>
        public void RefreshAsync(string sessionId, string connectionName, object userState) {
            if ((this.RefreshOperationCompleted == null)) {
                this.RefreshOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRefreshOperationCompleted);
            }
            this.InvokeAsync("Refresh", new object[] {
                        sessionId,
                        connectionName}, this.RefreshOperationCompleted, userState);
        }
        
        private void OnRefreshOperationCompleted(object arg) {
            if ((this.RefreshCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RefreshCompleted(this, new RefreshCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/office/excel/server/webservices/SaveWorkbook", RequestNamespace="http://schemas.microsoft.com/office/excel/server/webservices", ResponseNamespace="http://schemas.microsoft.com/office/excel/server/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("status")]
        public Status[] SaveWorkbook(string sessionId) {
            object[] results = this.Invoke("SaveWorkbook", new object[] {
                        sessionId});
            return ((Status[])(results[0]));
        }
        
        /// <remarks/>
        public void SaveWorkbookAsync(string sessionId) {
            this.SaveWorkbookAsync(sessionId, null);
        }
        
        /// <remarks/>
        public void SaveWorkbookAsync(string sessionId, object userState) {
            if ((this.SaveWorkbookOperationCompleted == null)) {
                this.SaveWorkbookOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveWorkbookOperationCompleted);
            }
            this.InvokeAsync("SaveWorkbook", new object[] {
                        sessionId}, this.SaveWorkbookOperationCompleted, userState);
        }
        
        private void OnSaveWorkbookOperationCompleted(object arg) {
            if ((this.SaveWorkbookCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveWorkbookCompleted(this, new SaveWorkbookCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/office/excel/server/webservices/SaveWorkbookCopy", RequestNamespace="http://schemas.microsoft.com/office/excel/server/webservices", ResponseNamespace="http://schemas.microsoft.com/office/excel/server/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("status")]
        public Status[] SaveWorkbookCopy(string sessionId, string workbookPath, WorkbookType workbookType, SaveOptions saveOptions) {
            object[] results = this.Invoke("SaveWorkbookCopy", new object[] {
                        sessionId,
                        workbookPath,
                        workbookType,
                        saveOptions});
            return ((Status[])(results[0]));
        }
        
        /// <remarks/>
        public void SaveWorkbookCopyAsync(string sessionId, string workbookPath, WorkbookType workbookType, SaveOptions saveOptions) {
            this.SaveWorkbookCopyAsync(sessionId, workbookPath, workbookType, saveOptions, null);
        }
        
        /// <remarks/>
        public void SaveWorkbookCopyAsync(string sessionId, string workbookPath, WorkbookType workbookType, SaveOptions saveOptions, object userState) {
            if ((this.SaveWorkbookCopyOperationCompleted == null)) {
                this.SaveWorkbookCopyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveWorkbookCopyOperationCompleted);
            }
            this.InvokeAsync("SaveWorkbookCopy", new object[] {
                        sessionId,
                        workbookPath,
                        workbookType,
                        saveOptions}, this.SaveWorkbookCopyOperationCompleted, userState);
        }
        
        private void OnSaveWorkbookCopyOperationCompleted(object arg) {
            if ((this.SaveWorkbookCopyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveWorkbookCopyCompleted(this, new SaveWorkbookCopyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/office/excel/server/webservices/Calculate", RequestNamespace="http://schemas.microsoft.com/office/excel/server/webservices", ResponseNamespace="http://schemas.microsoft.com/office/excel/server/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("status")]
        public Status[] Calculate(string sessionId, string sheetName, RangeCoordinates rangeCoordinates) {
            object[] results = this.Invoke("Calculate", new object[] {
                        sessionId,
                        sheetName,
                        rangeCoordinates});
            return ((Status[])(results[0]));
        }
        
        /// <remarks/>
        public void CalculateAsync(string sessionId, string sheetName, RangeCoordinates rangeCoordinates) {
            this.CalculateAsync(sessionId, sheetName, rangeCoordinates, null);
        }
        
        /// <remarks/>
        public void CalculateAsync(string sessionId, string sheetName, RangeCoordinates rangeCoordinates, object userState) {
            if ((this.CalculateOperationCompleted == null)) {
                this.CalculateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCalculateOperationCompleted);
            }
            this.InvokeAsync("Calculate", new object[] {
                        sessionId,
                        sheetName,
                        rangeCoordinates}, this.CalculateOperationCompleted, userState);
        }
        
        private void OnCalculateOperationCompleted(object arg) {
            if ((this.CalculateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CalculateCompleted(this, new CalculateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/office/excel/server/webservices/CalculateA1", RequestNamespace="http://schemas.microsoft.com/office/excel/server/webservices", ResponseNamespace="http://schemas.microsoft.com/office/excel/server/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("status")]
        public Status[] CalculateA1(string sessionId, string sheetName, string rangeName) {
            object[] results = this.Invoke("CalculateA1", new object[] {
                        sessionId,
                        sheetName,
                        rangeName});
            return ((Status[])(results[0]));
        }
        
        /// <remarks/>
        public void CalculateA1Async(string sessionId, string sheetName, string rangeName) {
            this.CalculateA1Async(sessionId, sheetName, rangeName, null);
        }
        
        /// <remarks/>
        public void CalculateA1Async(string sessionId, string sheetName, string rangeName, object userState) {
            if ((this.CalculateA1OperationCompleted == null)) {
                this.CalculateA1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnCalculateA1OperationCompleted);
            }
            this.InvokeAsync("CalculateA1", new object[] {
                        sessionId,
                        sheetName,
                        rangeName}, this.CalculateA1OperationCompleted, userState);
        }
        
        private void OnCalculateA1OperationCompleted(object arg) {
            if ((this.CalculateA1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CalculateA1Completed(this, new CalculateA1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/office/excel/server/webservices/GetRange", RequestNamespace="http://schemas.microsoft.com/office/excel/server/webservices", ResponseNamespace="http://schemas.microsoft.com/office/excel/server/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object[] GetRange(string sessionId, string sheetName, RangeCoordinates rangeCoordinates, bool formatted, out Status[] status) {
            object[] results = this.Invoke("GetRange", new object[] {
                        sessionId,
                        sheetName,
                        rangeCoordinates,
                        formatted});
            status = ((Status[])(results[1]));
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void GetRangeAsync(string sessionId, string sheetName, RangeCoordinates rangeCoordinates, bool formatted) {
            this.GetRangeAsync(sessionId, sheetName, rangeCoordinates, formatted, null);
        }
        
        /// <remarks/>
        public void GetRangeAsync(string sessionId, string sheetName, RangeCoordinates rangeCoordinates, bool formatted, object userState) {
            if ((this.GetRangeOperationCompleted == null)) {
                this.GetRangeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRangeOperationCompleted);
            }
            this.InvokeAsync("GetRange", new object[] {
                        sessionId,
                        sheetName,
                        rangeCoordinates,
                        formatted}, this.GetRangeOperationCompleted, userState);
        }
        
        private void OnGetRangeOperationCompleted(object arg) {
            if ((this.GetRangeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRangeCompleted(this, new GetRangeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/office/excel/server/webservices/GetRangeA1", RequestNamespace="http://schemas.microsoft.com/office/excel/server/webservices", ResponseNamespace="http://schemas.microsoft.com/office/excel/server/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object[] GetRangeA1(string sessionId, string sheetName, string rangeName, bool formatted, out Status[] status) {
            object[] results = this.Invoke("GetRangeA1", new object[] {
                        sessionId,
                        sheetName,
                        rangeName,
                        formatted});
            status = ((Status[])(results[1]));
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void GetRangeA1Async(string sessionId, string sheetName, string rangeName, bool formatted) {
            this.GetRangeA1Async(sessionId, sheetName, rangeName, formatted, null);
        }
        
        /// <remarks/>
        public void GetRangeA1Async(string sessionId, string sheetName, string rangeName, bool formatted, object userState) {
            if ((this.GetRangeA1OperationCompleted == null)) {
                this.GetRangeA1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRangeA1OperationCompleted);
            }
            this.InvokeAsync("GetRangeA1", new object[] {
                        sessionId,
                        sheetName,
                        rangeName,
                        formatted}, this.GetRangeA1OperationCompleted, userState);
        }
        
        private void OnGetRangeA1OperationCompleted(object arg) {
            if ((this.GetRangeA1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRangeA1Completed(this, new GetRangeA1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/office/excel/server/webservices/GetCell", RequestNamespace="http://schemas.microsoft.com/office/excel/server/webservices", ResponseNamespace="http://schemas.microsoft.com/office/excel/server/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object GetCell(string sessionId, string sheetName, int row, int column, bool formatted, out Status[] status) {
            object[] results = this.Invoke("GetCell", new object[] {
                        sessionId,
                        sheetName,
                        row,
                        column,
                        formatted});
            status = ((Status[])(results[1]));
            return ((object)(results[0]));
        }
        
        /// <remarks/>
        public void GetCellAsync(string sessionId, string sheetName, int row, int column, bool formatted) {
            this.GetCellAsync(sessionId, sheetName, row, column, formatted, null);
        }
        
        /// <remarks/>
        public void GetCellAsync(string sessionId, string sheetName, int row, int column, bool formatted, object userState) {
            if ((this.GetCellOperationCompleted == null)) {
                this.GetCellOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCellOperationCompleted);
            }
            this.InvokeAsync("GetCell", new object[] {
                        sessionId,
                        sheetName,
                        row,
                        column,
                        formatted}, this.GetCellOperationCompleted, userState);
        }
        
        private void OnGetCellOperationCompleted(object arg) {
            if ((this.GetCellCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCellCompleted(this, new GetCellCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/office/excel/server/webservices/GetCellA1", RequestNamespace="http://schemas.microsoft.com/office/excel/server/webservices", ResponseNamespace="http://schemas.microsoft.com/office/excel/server/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object GetCellA1(string sessionId, string sheetName, string rangeName, bool formatted, out Status[] status) {
            object[] results = this.Invoke("GetCellA1", new object[] {
                        sessionId,
                        sheetName,
                        rangeName,
                        formatted});
            status = ((Status[])(results[1]));
            return ((object)(results[0]));
        }
        
        /// <remarks/>
        public void GetCellA1Async(string sessionId, string sheetName, string rangeName, bool formatted) {
            this.GetCellA1Async(sessionId, sheetName, rangeName, formatted, null);
        }
        
        /// <remarks/>
        public void GetCellA1Async(string sessionId, string sheetName, string rangeName, bool formatted, object userState) {
            if ((this.GetCellA1OperationCompleted == null)) {
                this.GetCellA1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCellA1OperationCompleted);
            }
            this.InvokeAsync("GetCellA1", new object[] {
                        sessionId,
                        sheetName,
                        rangeName,
                        formatted}, this.GetCellA1OperationCompleted, userState);
        }
        
        private void OnGetCellA1OperationCompleted(object arg) {
            if ((this.GetCellA1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCellA1Completed(this, new GetCellA1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/office/excel/server/webservices/GetPublishedItemName" +
            "s", RequestNamespace="http://schemas.microsoft.com/office/excel/server/webservices", ResponseNamespace="http://schemas.microsoft.com/office/excel/server/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WorkbookItem[] GetPublishedItemNames(string sessionId, out Status[] status) {
            object[] results = this.Invoke("GetPublishedItemNames", new object[] {
                        sessionId});
            status = ((Status[])(results[1]));
            return ((WorkbookItem[])(results[0]));
        }
        
        /// <remarks/>
        public void GetPublishedItemNamesAsync(string sessionId) {
            this.GetPublishedItemNamesAsync(sessionId, null);
        }
        
        /// <remarks/>
        public void GetPublishedItemNamesAsync(string sessionId, object userState) {
            if ((this.GetPublishedItemNamesOperationCompleted == null)) {
                this.GetPublishedItemNamesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPublishedItemNamesOperationCompleted);
            }
            this.InvokeAsync("GetPublishedItemNames", new object[] {
                        sessionId}, this.GetPublishedItemNamesOperationCompleted, userState);
        }
        
        private void OnGetPublishedItemNamesOperationCompleted(object arg) {
            if ((this.GetPublishedItemNamesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPublishedItemNamesCompleted(this, new GetPublishedItemNamesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/office/excel/server/webservices/GetSheetNames", RequestNamespace="http://schemas.microsoft.com/office/excel/server/webservices", ResponseNamespace="http://schemas.microsoft.com/office/excel/server/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SheetInfo[] GetSheetNames(string sessionId, out Status[] status) {
            object[] results = this.Invoke("GetSheetNames", new object[] {
                        sessionId});
            status = ((Status[])(results[1]));
            return ((SheetInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSheetNamesAsync(string sessionId) {
            this.GetSheetNamesAsync(sessionId, null);
        }
        
        /// <remarks/>
        public void GetSheetNamesAsync(string sessionId, object userState) {
            if ((this.GetSheetNamesOperationCompleted == null)) {
                this.GetSheetNamesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSheetNamesOperationCompleted);
            }
            this.InvokeAsync("GetSheetNames", new object[] {
                        sessionId}, this.GetSheetNamesOperationCompleted, userState);
        }
        
        private void OnGetSheetNamesOperationCompleted(object arg) {
            if ((this.GetSheetNamesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSheetNamesCompleted(this, new GetSheetNamesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/office/excel/server/webservices/SetRange", RequestNamespace="http://schemas.microsoft.com/office/excel/server/webservices", ResponseNamespace="http://schemas.microsoft.com/office/excel/server/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("status")]
        public Status[] SetRange(string sessionId, string sheetName, RangeCoordinates rangeCoordinates, object[] rangeValues) {
            object[] results = this.Invoke("SetRange", new object[] {
                        sessionId,
                        sheetName,
                        rangeCoordinates,
                        rangeValues});
            return ((Status[])(results[0]));
        }
        
        /// <remarks/>
        public void SetRangeAsync(string sessionId, string sheetName, RangeCoordinates rangeCoordinates, object[] rangeValues) {
            this.SetRangeAsync(sessionId, sheetName, rangeCoordinates, rangeValues, null);
        }
        
        /// <remarks/>
        public void SetRangeAsync(string sessionId, string sheetName, RangeCoordinates rangeCoordinates, object[] rangeValues, object userState) {
            if ((this.SetRangeOperationCompleted == null)) {
                this.SetRangeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetRangeOperationCompleted);
            }
            this.InvokeAsync("SetRange", new object[] {
                        sessionId,
                        sheetName,
                        rangeCoordinates,
                        rangeValues}, this.SetRangeOperationCompleted, userState);
        }
        
        private void OnSetRangeOperationCompleted(object arg) {
            if ((this.SetRangeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetRangeCompleted(this, new SetRangeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/office/excel/server/webservices/SetRangeA1", RequestNamespace="http://schemas.microsoft.com/office/excel/server/webservices", ResponseNamespace="http://schemas.microsoft.com/office/excel/server/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("status")]
        public Status[] SetRangeA1(string sessionId, string sheetName, string rangeName, object[] rangeValues) {
            object[] results = this.Invoke("SetRangeA1", new object[] {
                        sessionId,
                        sheetName,
                        rangeName,
                        rangeValues});
            return ((Status[])(results[0]));
        }
        
        /// <remarks/>
        public void SetRangeA1Async(string sessionId, string sheetName, string rangeName, object[] rangeValues) {
            this.SetRangeA1Async(sessionId, sheetName, rangeName, rangeValues, null);
        }
        
        /// <remarks/>
        public void SetRangeA1Async(string sessionId, string sheetName, string rangeName, object[] rangeValues, object userState) {
            if ((this.SetRangeA1OperationCompleted == null)) {
                this.SetRangeA1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetRangeA1OperationCompleted);
            }
            this.InvokeAsync("SetRangeA1", new object[] {
                        sessionId,
                        sheetName,
                        rangeName,
                        rangeValues}, this.SetRangeA1OperationCompleted, userState);
        }
        
        private void OnSetRangeA1OperationCompleted(object arg) {
            if ((this.SetRangeA1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetRangeA1Completed(this, new SetRangeA1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/office/excel/server/webservices/SetCell", RequestNamespace="http://schemas.microsoft.com/office/excel/server/webservices", ResponseNamespace="http://schemas.microsoft.com/office/excel/server/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("status")]
        public Status[] SetCell(string sessionId, string sheetName, int row, int column, object cellValue) {
            object[] results = this.Invoke("SetCell", new object[] {
                        sessionId,
                        sheetName,
                        row,
                        column,
                        cellValue});
            return ((Status[])(results[0]));
        }
        
        /// <remarks/>
        public void SetCellAsync(string sessionId, string sheetName, int row, int column, object cellValue) {
            this.SetCellAsync(sessionId, sheetName, row, column, cellValue, null);
        }
        
        /// <remarks/>
        public void SetCellAsync(string sessionId, string sheetName, int row, int column, object cellValue, object userState) {
            if ((this.SetCellOperationCompleted == null)) {
                this.SetCellOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetCellOperationCompleted);
            }
            this.InvokeAsync("SetCell", new object[] {
                        sessionId,
                        sheetName,
                        row,
                        column,
                        cellValue}, this.SetCellOperationCompleted, userState);
        }
        
        private void OnSetCellOperationCompleted(object arg) {
            if ((this.SetCellCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetCellCompleted(this, new SetCellCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/office/excel/server/webservices/SetCellA1", RequestNamespace="http://schemas.microsoft.com/office/excel/server/webservices", ResponseNamespace="http://schemas.microsoft.com/office/excel/server/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("status")]
        public Status[] SetCellA1(string sessionId, string sheetName, string rangeName, object cellValue) {
            object[] results = this.Invoke("SetCellA1", new object[] {
                        sessionId,
                        sheetName,
                        rangeName,
                        cellValue});
            return ((Status[])(results[0]));
        }
        
        /// <remarks/>
        public void SetCellA1Async(string sessionId, string sheetName, string rangeName, object cellValue) {
            this.SetCellA1Async(sessionId, sheetName, rangeName, cellValue, null);
        }
        
        /// <remarks/>
        public void SetCellA1Async(string sessionId, string sheetName, string rangeName, object cellValue, object userState) {
            if ((this.SetCellA1OperationCompleted == null)) {
                this.SetCellA1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetCellA1OperationCompleted);
            }
            this.InvokeAsync("SetCellA1", new object[] {
                        sessionId,
                        sheetName,
                        rangeName,
                        cellValue}, this.SetCellA1OperationCompleted, userState);
        }
        
        private void OnSetCellA1OperationCompleted(object arg) {
            if ((this.SetCellA1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetCellA1Completed(this, new SetCellA1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/office/excel/server/webservices/CalculateWorkbook", RequestNamespace="http://schemas.microsoft.com/office/excel/server/webservices", ResponseNamespace="http://schemas.microsoft.com/office/excel/server/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("status")]
        public Status[] CalculateWorkbook(string sessionId, CalculateType calculateType) {
            object[] results = this.Invoke("CalculateWorkbook", new object[] {
                        sessionId,
                        calculateType});
            return ((Status[])(results[0]));
        }
        
        /// <remarks/>
        public void CalculateWorkbookAsync(string sessionId, CalculateType calculateType) {
            this.CalculateWorkbookAsync(sessionId, calculateType, null);
        }
        
        /// <remarks/>
        public void CalculateWorkbookAsync(string sessionId, CalculateType calculateType, object userState) {
            if ((this.CalculateWorkbookOperationCompleted == null)) {
                this.CalculateWorkbookOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCalculateWorkbookOperationCompleted);
            }
            this.InvokeAsync("CalculateWorkbook", new object[] {
                        sessionId,
                        calculateType}, this.CalculateWorkbookOperationCompleted, userState);
        }
        
        private void OnCalculateWorkbookOperationCompleted(object arg) {
            if ((this.CalculateWorkbookCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CalculateWorkbookCompleted(this, new CalculateWorkbookCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/office/excel/server/webservices/GetSessionInformatio" +
            "n", RequestNamespace="http://schemas.microsoft.com/office/excel/server/webservices", ResponseNamespace="http://schemas.microsoft.com/office/excel/server/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("serverVersion")]
        public string GetSessionInformation(string sessionId, out string uiCultureNameUsed, out string dataCultureNameUsed, out Status[] status) {
            object[] results = this.Invoke("GetSessionInformation", new object[] {
                        sessionId});
            uiCultureNameUsed = ((string)(results[1]));
            dataCultureNameUsed = ((string)(results[2]));
            status = ((Status[])(results[3]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSessionInformationAsync(string sessionId) {
            this.GetSessionInformationAsync(sessionId, null);
        }
        
        /// <remarks/>
        public void GetSessionInformationAsync(string sessionId, object userState) {
            if ((this.GetSessionInformationOperationCompleted == null)) {
                this.GetSessionInformationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSessionInformationOperationCompleted);
            }
            this.InvokeAsync("GetSessionInformation", new object[] {
                        sessionId}, this.GetSessionInformationOperationCompleted, userState);
        }
        
        private void OnGetSessionInformationOperationCompleted(object arg) {
            if ((this.GetSessionInformationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSessionInformationCompleted(this, new GetSessionInformationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/office/excel/server/webservices/CancelRequest", RequestNamespace="http://schemas.microsoft.com/office/excel/server/webservices", ResponseNamespace="http://schemas.microsoft.com/office/excel/server/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("status")]
        public Status[] CancelRequest(string sessionId) {
            object[] results = this.Invoke("CancelRequest", new object[] {
                        sessionId});
            return ((Status[])(results[0]));
        }
        
        /// <remarks/>
        public void CancelRequestAsync(string sessionId) {
            this.CancelRequestAsync(sessionId, null);
        }
        
        /// <remarks/>
        public void CancelRequestAsync(string sessionId, object userState) {
            if ((this.CancelRequestOperationCompleted == null)) {
                this.CancelRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelRequestOperationCompleted);
            }
            this.InvokeAsync("CancelRequest", new object[] {
                        sessionId}, this.CancelRequestOperationCompleted, userState);
        }
        
        private void OnCancelRequestOperationCompleted(object arg) {
            if ((this.CancelRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelRequestCompleted(this, new CancelRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/office/excel/server/webservices/GetWorkbook", RequestNamespace="http://schemas.microsoft.com/office/excel/server/webservices", ResponseNamespace="http://schemas.microsoft.com/office/excel/server/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetWorkbook(string sessionId, WorkbookType workbookType, out Status[] status) {
            object[] results = this.Invoke("GetWorkbook", new object[] {
                        sessionId,
                        workbookType});
            status = ((Status[])(results[1]));
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetWorkbookAsync(string sessionId, WorkbookType workbookType) {
            this.GetWorkbookAsync(sessionId, workbookType, null);
        }
        
        /// <remarks/>
        public void GetWorkbookAsync(string sessionId, WorkbookType workbookType, object userState) {
            if ((this.GetWorkbookOperationCompleted == null)) {
                this.GetWorkbookOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWorkbookOperationCompleted);
            }
            this.InvokeAsync("GetWorkbook", new object[] {
                        sessionId,
                        workbookType}, this.GetWorkbookOperationCompleted, userState);
        }
        
        private void OnGetWorkbookOperationCompleted(object arg) {
            if ((this.GetWorkbookCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWorkbookCompleted(this, new GetWorkbookCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/office/excel/server/webservices/SetParameters", RequestNamespace="http://schemas.microsoft.com/office/excel/server/webservices", ResponseNamespace="http://schemas.microsoft.com/office/excel/server/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("status")]
        public Status[] SetParameters(string sessionId, ParameterInfo[] parameters) {
            object[] results = this.Invoke("SetParameters", new object[] {
                        sessionId,
                        parameters});
            return ((Status[])(results[0]));
        }
        
        /// <remarks/>
        public void SetParametersAsync(string sessionId, ParameterInfo[] parameters) {
            this.SetParametersAsync(sessionId, parameters, null);
        }
        
        /// <remarks/>
        public void SetParametersAsync(string sessionId, ParameterInfo[] parameters, object userState) {
            if ((this.SetParametersOperationCompleted == null)) {
                this.SetParametersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetParametersOperationCompleted);
            }
            this.InvokeAsync("SetParameters", new object[] {
                        sessionId,
                        parameters}, this.SetParametersOperationCompleted, userState);
        }
        
        private void OnSetParametersOperationCompleted(object arg) {
            if ((this.SetParametersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetParametersCompleted(this, new SetParametersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/office/excel/server/webservices/SetCalculationOption" +
            "s", RequestNamespace="http://schemas.microsoft.com/office/excel/server/webservices", ResponseNamespace="http://schemas.microsoft.com/office/excel/server/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("status")]
        public Status[] SetCalculationOptions(string sessionId, WorkbookCalculation calcType) {
            object[] results = this.Invoke("SetCalculationOptions", new object[] {
                        sessionId,
                        calcType});
            return ((Status[])(results[0]));
        }
        
        /// <remarks/>
        public void SetCalculationOptionsAsync(string sessionId, WorkbookCalculation calcType) {
            this.SetCalculationOptionsAsync(sessionId, calcType, null);
        }
        
        /// <remarks/>
        public void SetCalculationOptionsAsync(string sessionId, WorkbookCalculation calcType, object userState) {
            if ((this.SetCalculationOptionsOperationCompleted == null)) {
                this.SetCalculationOptionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetCalculationOptionsOperationCompleted);
            }
            this.InvokeAsync("SetCalculationOptions", new object[] {
                        sessionId,
                        calcType}, this.SetCalculationOptionsOperationCompleted, userState);
        }
        
        private void OnSetCalculationOptionsOperationCompleted(object arg) {
            if ((this.SetCalculationOptionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetCalculationOptionsCompleted(this, new SetCalculationOptionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/office/excel/server/webservices/GetChartImageUrl", RequestNamespace="http://schemas.microsoft.com/office/excel/server/webservices", ResponseNamespace="http://schemas.microsoft.com/office/excel/server/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetChartImageUrl(string sessionId, Size size, string chartName, out Status[] status) {
            object[] results = this.Invoke("GetChartImageUrl", new object[] {
                        sessionId,
                        size,
                        chartName});
            status = ((Status[])(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetChartImageUrlAsync(string sessionId, Size size, string chartName) {
            this.GetChartImageUrlAsync(sessionId, size, chartName, null);
        }
        
        /// <remarks/>
        public void GetChartImageUrlAsync(string sessionId, Size size, string chartName, object userState) {
            if ((this.GetChartImageUrlOperationCompleted == null)) {
                this.GetChartImageUrlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetChartImageUrlOperationCompleted);
            }
            this.InvokeAsync("GetChartImageUrl", new object[] {
                        sessionId,
                        size,
                        chartName}, this.GetChartImageUrlOperationCompleted, userState);
        }
        
        private void OnGetChartImageUrlOperationCompleted(object arg) {
            if ((this.GetChartImageUrlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetChartImageUrlCompleted(this, new GetChartImageUrlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.33440")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/office/excel/server/webservices")]
    public partial class Status {
        
        private string nameField;
        
        private string severityField;
        
        private string messageField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Severity {
            get {
                return this.severityField;
            }
            set {
                this.severityField = value;
            }
        }
        
        /// <remarks/>
        public string Message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.33440")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/office/excel/server/webservices")]
    public partial class Size {
        
        private int widthField;
        
        private int heightField;
        
        /// <remarks/>
        public int Width {
            get {
                return this.widthField;
            }
            set {
                this.widthField = value;
            }
        }
        
        /// <remarks/>
        public int Height {
            get {
                return this.heightField;
            }
            set {
                this.heightField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.33440")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/office/excel/server/webservices")]
    public partial class ParameterInfo {
        
        private string nameField;
        
        private string[] valuesField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string[] Values {
            get {
                return this.valuesField;
            }
            set {
                this.valuesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.33440")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/office/excel/server/webservices")]
    public partial class SheetInfo {
        
        private string nameField;
        
        private SheetType typeField;
        
        private SheetVisibility visibilityField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public SheetType Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public SheetVisibility Visibility {
            get {
                return this.visibilityField;
            }
            set {
                this.visibilityField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.33440")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/office/excel/server/webservices")]
    public enum SheetType {
        
        /// <remarks/>
        Worksheet,
        
        /// <remarks/>
        Chartsheet,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.33440")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/office/excel/server/webservices")]
    public enum SheetVisibility {
        
        /// <remarks/>
        Visible,
        
        /// <remarks/>
        Hidden,
        
        /// <remarks/>
        VeryHidden,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.33440")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/office/excel/server/webservices")]
    public partial class WorkbookItem {
        
        private string nameField;
        
        private ItemType typeField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public ItemType Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.33440")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/office/excel/server/webservices")]
    public enum ItemType {
        
        /// <remarks/>
        Chart,
        
        /// <remarks/>
        PivotTable,
        
        /// <remarks/>
        Table,
        
        /// <remarks/>
        NamedRange,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.33440")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/office/excel/server/webservices")]
    public partial class TypeExporter {
        
        private CellError cellErrorField;
        
        /// <remarks/>
        public CellError CellError {
            get {
                return this.cellErrorField;
            }
            set {
                this.cellErrorField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.33440")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/office/excel/server/webservices")]
    public enum CellError {
        
        /// <remarks/>
        Div0,
        
        /// <remarks/>
        NA,
        
        /// <remarks/>
        Name,
        
        /// <remarks/>
        Null,
        
        /// <remarks/>
        Num,
        
        /// <remarks/>
        Ref,
        
        /// <remarks/>
        Value,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.33440")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/office/excel/server/webservices")]
    public partial class RangeCoordinates {
        
        private int rowField;
        
        private int columnField;
        
        private int heightField;
        
        private int widthField;
        
        /// <remarks/>
        public int Row {
            get {
                return this.rowField;
            }
            set {
                this.rowField = value;
            }
        }
        
        /// <remarks/>
        public int Column {
            get {
                return this.columnField;
            }
            set {
                this.columnField = value;
            }
        }
        
        /// <remarks/>
        public int Height {
            get {
                return this.heightField;
            }
            set {
                this.heightField = value;
            }
        }
        
        /// <remarks/>
        public int Width {
            get {
                return this.widthField;
            }
            set {
                this.widthField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.33440")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/office/excel/server/webservices")]
    public enum WorkbookType {
        
        /// <remarks/>
        FullWorkbook,
        
        /// <remarks/>
        FullSnapshot,
        
        /// <remarks/>
        PublishedItemsSnapshot,
    }
    
    /// <remarks/>
    [System.FlagsAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.33440")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/office/excel/server/webservices")]
    public enum SaveOptions {
        
        /// <remarks/>
        None = 1,
        
        /// <remarks/>
        AllowOverwrite = 2,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.33440")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/office/excel/server/webservices")]
    public enum CalculateType {
        
        /// <remarks/>
        Recalculate,
        
        /// <remarks/>
        CalculateFull,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.33440")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/office/excel/server/webservices")]
    public enum WorkbookCalculation {
        
        /// <remarks/>
        Manual,
        
        /// <remarks/>
        Automatic,
        
        /// <remarks/>
        Semiautomatic,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetApiVersionCompletedEventHandler(object sender, GetApiVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetApiVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetApiVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public Status[] status {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Status[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void NewWorkbookCompletedEventHandler(object sender, NewWorkbookCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NewWorkbookCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NewWorkbookCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public Status[] status {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Status[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void OpenWorkbookForEditingCompletedEventHandler(object sender, OpenWorkbookForEditingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OpenWorkbookForEditingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OpenWorkbookForEditingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public Status[] status {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Status[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void OpenWorkbookCompletedEventHandler(object sender, OpenWorkbookCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OpenWorkbookCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OpenWorkbookCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public Status[] status {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Status[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void CloseWorkbookCompletedEventHandler(object sender, CloseWorkbookCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CloseWorkbookCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CloseWorkbookCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Status[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Status[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void RefreshCompletedEventHandler(object sender, RefreshCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RefreshCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RefreshCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Status[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Status[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void SaveWorkbookCompletedEventHandler(object sender, SaveWorkbookCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveWorkbookCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveWorkbookCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Status[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Status[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void SaveWorkbookCopyCompletedEventHandler(object sender, SaveWorkbookCopyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveWorkbookCopyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveWorkbookCopyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Status[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Status[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void CalculateCompletedEventHandler(object sender, CalculateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CalculateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CalculateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Status[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Status[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void CalculateA1CompletedEventHandler(object sender, CalculateA1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CalculateA1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CalculateA1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Status[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Status[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetRangeCompletedEventHandler(object sender, GetRangeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRangeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public Status[] status {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Status[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetRangeA1CompletedEventHandler(object sender, GetRangeA1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRangeA1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRangeA1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public Status[] status {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Status[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetCellCompletedEventHandler(object sender, GetCellCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCellCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCellCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public Status[] status {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Status[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetCellA1CompletedEventHandler(object sender, GetCellA1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCellA1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCellA1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public Status[] status {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Status[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetPublishedItemNamesCompletedEventHandler(object sender, GetPublishedItemNamesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPublishedItemNamesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPublishedItemNamesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public WorkbookItem[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WorkbookItem[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public Status[] status {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Status[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetSheetNamesCompletedEventHandler(object sender, GetSheetNamesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSheetNamesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSheetNamesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SheetInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SheetInfo[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public Status[] status {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Status[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void SetRangeCompletedEventHandler(object sender, SetRangeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetRangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetRangeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Status[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Status[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void SetRangeA1CompletedEventHandler(object sender, SetRangeA1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetRangeA1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetRangeA1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Status[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Status[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void SetCellCompletedEventHandler(object sender, SetCellCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetCellCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetCellCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Status[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Status[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void SetCellA1CompletedEventHandler(object sender, SetCellA1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetCellA1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetCellA1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Status[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Status[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void CalculateWorkbookCompletedEventHandler(object sender, CalculateWorkbookCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CalculateWorkbookCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CalculateWorkbookCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Status[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Status[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetSessionInformationCompletedEventHandler(object sender, GetSessionInformationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSessionInformationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSessionInformationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string uiCultureNameUsed {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string dataCultureNameUsed {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public Status[] status {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Status[])(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void CancelRequestCompletedEventHandler(object sender, CancelRequestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Status[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Status[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetWorkbookCompletedEventHandler(object sender, GetWorkbookCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWorkbookCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWorkbookCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public Status[] status {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Status[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void SetParametersCompletedEventHandler(object sender, SetParametersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetParametersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetParametersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Status[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Status[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void SetCalculationOptionsCompletedEventHandler(object sender, SetCalculationOptionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetCalculationOptionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetCalculationOptionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Status[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Status[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetChartImageUrlCompletedEventHandler(object sender, GetChartImageUrlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetChartImageUrlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetChartImageUrlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public Status[] status {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Status[])(this.results[1]));
            }
        }
    }
}

#pragma warning restore 1591