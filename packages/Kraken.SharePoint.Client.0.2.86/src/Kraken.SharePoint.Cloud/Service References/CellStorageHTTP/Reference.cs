//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Kraken.SharePoint.Cloud.CellStorageHTTP {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://schemas.microsoft.com/sharepoint/soap/", ConfigurationName="CellStorageHTTP.ICellStorages")]
    public interface ICellStorages {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.microsoft.com/sharepoint/soap/ICellStorages/ExecuteCellStorageRequ" +
            "est", ReplyAction="http://schemas.microsoft.com/sharepoint/soap/ICellStorages/ExecuteCellStorageRequ" +
            "estResponse")]
        System.ServiceModel.Channels.Message ExecuteCellStorageRequest(System.ServiceModel.Channels.Message request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://schemas.microsoft.com/sharepoint/soap/ICellStorages/ExecuteCellStorageRequ" +
            "est", ReplyAction="http://schemas.microsoft.com/sharepoint/soap/ICellStorages/ExecuteCellStorageRequ" +
            "estResponse")]
        System.IAsyncResult BeginExecuteCellStorageRequest(System.ServiceModel.Channels.Message request, System.AsyncCallback callback, object asyncState);
        
        System.ServiceModel.Channels.Message EndExecuteCellStorageRequest(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICellStoragesChannel : Kraken.SharePoint.Cloud.CellStorageHTTP.ICellStorages, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ExecuteCellStorageRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ExecuteCellStorageRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.ServiceModel.Channels.Message Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.ServiceModel.Channels.Message)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CellStoragesClient : System.ServiceModel.ClientBase<Kraken.SharePoint.Cloud.CellStorageHTTP.ICellStorages>, Kraken.SharePoint.Cloud.CellStorageHTTP.ICellStorages {
        
        private BeginOperationDelegate onBeginExecuteCellStorageRequestDelegate;
        
        private EndOperationDelegate onEndExecuteCellStorageRequestDelegate;
        
        private System.Threading.SendOrPostCallback onExecuteCellStorageRequestCompletedDelegate;
        
        public CellStoragesClient() {
        }
        
        public CellStoragesClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CellStoragesClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CellStoragesClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CellStoragesClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<ExecuteCellStorageRequestCompletedEventArgs> ExecuteCellStorageRequestCompleted;
        
        public System.ServiceModel.Channels.Message ExecuteCellStorageRequest(System.ServiceModel.Channels.Message request) {
            return base.Channel.ExecuteCellStorageRequest(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginExecuteCellStorageRequest(System.ServiceModel.Channels.Message request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginExecuteCellStorageRequest(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.ServiceModel.Channels.Message EndExecuteCellStorageRequest(System.IAsyncResult result) {
            return base.Channel.EndExecuteCellStorageRequest(result);
        }
        
        private System.IAsyncResult OnBeginExecuteCellStorageRequest(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.ServiceModel.Channels.Message request = ((System.ServiceModel.Channels.Message)(inValues[0]));
            return this.BeginExecuteCellStorageRequest(request, callback, asyncState);
        }
        
        private object[] OnEndExecuteCellStorageRequest(System.IAsyncResult result) {
            System.ServiceModel.Channels.Message retVal = this.EndExecuteCellStorageRequest(result);
            return new object[] {
                    retVal};
        }
        
        private void OnExecuteCellStorageRequestCompleted(object state) {
            if ((this.ExecuteCellStorageRequestCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ExecuteCellStorageRequestCompleted(this, new ExecuteCellStorageRequestCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ExecuteCellStorageRequestAsync(System.ServiceModel.Channels.Message request) {
            this.ExecuteCellStorageRequestAsync(request, null);
        }
        
        public void ExecuteCellStorageRequestAsync(System.ServiceModel.Channels.Message request, object userState) {
            if ((this.onBeginExecuteCellStorageRequestDelegate == null)) {
                this.onBeginExecuteCellStorageRequestDelegate = new BeginOperationDelegate(this.OnBeginExecuteCellStorageRequest);
            }
            if ((this.onEndExecuteCellStorageRequestDelegate == null)) {
                this.onEndExecuteCellStorageRequestDelegate = new EndOperationDelegate(this.OnEndExecuteCellStorageRequest);
            }
            if ((this.onExecuteCellStorageRequestCompletedDelegate == null)) {
                this.onExecuteCellStorageRequestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnExecuteCellStorageRequestCompleted);
            }
            base.InvokeAsync(this.onBeginExecuteCellStorageRequestDelegate, new object[] {
                        request}, this.onEndExecuteCellStorageRequestDelegate, this.onExecuteCellStorageRequestCompletedDelegate, userState);
        }
    }
}
