using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Net.Mail;
using System.Runtime.Serialization;

namespace Kraken.SharePoint.Smtp {

  /// <summary>
  /// Use this class to catch Exceptions generated by MailMessageExtended and related
  /// classes, so that multiple email jobs can run uninterrupted regardless of the outcome
  /// of any single attempt to send a message. It also traps the hidden COM errors that
  /// come back from the SMTP server and the System.Net.Mail SMTP client.
  /// </summary>
  [Serializable]
  public class KrakenSmtpException : Exception {

    public KrakenSmtpException() {
      EnableCDODrilling = true;
    }
    public KrakenSmtpException(string message) : base(message) {
      EnableCDODrilling = true;
    }
    public KrakenSmtpException(string message, Exception innerException) : base(message, innerException) {
      EnableCDODrilling = true;
    }
    protected KrakenSmtpException(SerializationInfo info, StreamingContext context) : base(info, context) {
      EnableCDODrilling = true;
    }

    /// <summary>
    /// This function exposes the real cause of SmtpExceptions.
    /// Because .NET 1.x/2 Smtp was just a wrapper for CDONTS, the 
    /// errors aren't really meaningful until you try to drill into them.
    /// Bubbling the messages up makes debugging a whole lot faster.
    /// This still seems somewhat true in .NET 2.0 (and even 3.5) as well.
    /// </summary>
    public bool EnableCDODrilling { get; set; }

    public override string Message {
      get {
        StringBuilder sb = new StringBuilder();
        sb.AppendFormat("Call to Smtp Send() threw exception for ", base.Message);
        if (EnableCDODrilling && this.InnerException != null) {
          Exception deepestException = this.InnerException;
          while (deepestException.InnerException != null)
            deepestException = deepestException.InnerException;
          sb.AppendFormat(" --> InnerException: ", deepestException.Message);
        }
        return sb.ToString();
      }
    }

  }

}

